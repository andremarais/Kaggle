read.csv('store.scv')
wd()
getwd()
list.files()
stores <- read.csv('store.csv')
train.data <- read.csv('train.csv')
unique(train.data$Store)
sample(train.data$Store,25)
sample(train.data$Store,25)
sample(train.data$Store,25)
sample(train.data$Store,25)
set.seed(115)
train.ss <- train.data[sample(train.data$Store,25),]
set.seed(115)
train.ss <- train.data[sample(train.data$Store,25),]
set.seed(115)
sample(train.data$Store,25)
set.seed(115)
sample(train.data$Store,25)
set.seed(115)
sample(train.data$Store,25)
set.seed(115)
sample(train.data$Store,25)
train.ss <- train.data[which(train.data$Store %in% sample.stores),]
sample.stores <- sample(train.data$Store,25)
train.ss <- train.data[which(train.data$Store %in% sample.stores),]
set.seed(115)
sample.stores <- sample(train.data$Store,25)
train.ss <- train.data[which(train.data$Store %in% sample.stores),]
set.seed(115)
sample.stores <- sample(train.data$Store,25)
train.ss <- train.data[which(train.data$Store %in% sample.stores),]
set.seed(115)
sample.stores <- sample(train.data$Store,25)
train.ss <- train.data[which(train.data$Store %in% sample.stores),]
set.seed(115)
sample.stores <- sample(train.data$Store,25)
train.ss <- train.data[which(train.data$Store %in% sample.stores),]
head(train.ss)
str(train.ss)
as.Date(train.ss$Date, format = '%Y-%m-%d)
as.Date(train.ss$Date, format = '%Y-%m-%d))
as.Date(train.ss$Date, format = '%Y-%m-%d')
train.ss$Date <- as.Date(train.ss$Date, format = '%Y-%m-%d')
library(ggplot2)
head(train.ss)
ggplot(train.ss) + geom_line(aes(x = Date, y = Sales)) + facet_grid(store ~.)
ggplot(train.ss) + geom_line(aes(x = Date, y = Sales)) + facet_grid(Store ~.)
ggplot(train.ss[train.ss$Store == 190,])+ geom_line(aes(x = Date, y = Sales))
nrow(train.ss[train.ss$Store == 190,])
view(train.ss[train.ss$Store == 190,])
View(train.ss[train.ss$Store == 190,])
View(stores)
decompose(train.ss[train.ss$Store == 190,])
decompose(train.ss[train.ss$Store == 190,'Sales'])
train.ss[train.ss$Store == 190,'Sales']
?decompose
?t.s
?ts
decompose(ts(train.ss[train.ss$Store == 190,'Sales']))
co2
head(co2)
str(co2)
a <- ts(train.ss[train.ss$Store == 190,])
a
head(a)
a$Sales
a <- ts(train.ss$Sales)
decompose(a)
a
decompose(a)
?ts
shop190 <- train.ss[train.ss$Store == 190,]
nrow(shop190)
758/7
ts(shop190$Sales, frequency = 1)
decompose(ts(shop190$Sales, frequency = 1))
758/6
758/4
758/13
758/17
for (1 in 3:20) print(758/i)
for (i in 3:20) print(758/i)
for (i in 21:40) print(758/i)
for (i in 21:40) print(c(i,758/i))
for (i in 21:60) print(c(i,758/i))
decompose(ts(shop190$Sales, frequency = 50))
plot(decompose(ts(shop190$Sales, frequency = 50)))
7 %% 5
758 - (758 %% 7)
head(train.ss)
table(train.ss$DayOfWeek)
setwd("~/Documents/USCA/Rossmann/Kaggle")
stores <- read.csv('store.csv')
train.data <- read.csv('train.csv')
set.seed(115)
sample.stores <- sample(train.data$Store,25)
train.ss <- train.data[which(train.data$Store %in% sample.stores),]
train.ss$Date <- as.Date(train.ss$Date, format = '%Y-%m-%d')
ggplot(train.ss) + geom_line(aes(x = Date, y = Sales)) + facet_grid(Store ~.)
library(ggplot2)
library(randomForest)
install.packages('randomForest')
ggplot(train.ss) + geom_line(aes(x = Date, y = Sales)) + facet_grid(Store ~.)
ggplot(train.ss[train.ss$Store == 190,])+ geom_line(aes(x = Date, y = Sales))
store190 <- merge(train.ss[train.ss$Store == 190,], stores[stores$Store == 190,])
no.of.trading.days <- length(unique(store190$DayOfWeek[store190$Open == 1]))
store190 <- store190[1:(nrow(store190) - nrow(store190) %% no.of.trading.days),][store190$Sales != 0,]
ts190 <- ts(store190$Sales, frequency = no.of.trading.days)
plot(decompose(ts190))
?decompose
store190[1:(nrow(store190) - nrow(store190) %% no.of.trading.days),]
nrow(store190) %% no.of.trading.days
nrow(store190)
no.of.trading.days
store190
plot(decompose(ts190)$x - decompose(ts190)$random)
plot(decompose(ts190))
?decompose
plot(decompose(ts190)$x - decompose(ts190)$random)
lines(decompose(ts190)$x, col = 'red')
store190$PromoMonth <- sapply(store190$Date, function(x) if (grepl(format(x, '%b'), stores$PromoInterval[stores$Store == 190])) 1 else 0)
function (X, FUN, ...)
?grepl
??grepl
?grepl
grep(format(store190$Date, '%b')[1], as.character(stores$PromoInterval[stores$Store == 190]))
store190$PromoMonth <- sapply(store190$Date, function(x) if (grepl(format(x, '%b'), stores$PromoInterval[stores$Store == 190])) 1 else 0)
function (X, FUN, ...)
)
ibrary(ggplot2)
library(randomForest)
stores <- read.csv('store.csv')
train.data <- read.csv('train.csv')
set.seed(115)
sample.stores <- sample(train.data$Store,25)
train.ss <- train.data[which(train.data$Store %in% sample.stores),]
train.ss$Date <- as.Date(train.ss$Date, format = '%Y-%m-%d')
ggplot(train.ss) + geom_line(aes(x = Date, y = Sales)) + facet_grid(Store ~.)
ggplot(train.ss[train.ss$Store == 190,])+ geom_line(aes(x = Date, y = Sales))
# exploring store 190
store190 <- merge(train.ss[train.ss$Store == 190,], stores[stores$Store == 190,])
# trim off last n days to create time series
no.of.trading.days <- length(unique(store190$DayOfWeek[store190$Open == 1]))
store190 <- store190[1:(nrow(store190) - nrow(store190) %% no.of.trading.days),][store190$Sales != 0,]
ts190 <- ts(store190$Sales, frequency = no.of.trading.days)
plot(decompose(ts190))
plot(decompose(ts190)$x - decompose(ts190)$random)
lines(decompose(ts190)$x, col = 'red')
store190$PromoMonth <- sapply(store190$Date, function(x) if (grepl(format(x, '%b'), stores$PromoInterval[stores$Store == 190])) 1 else 0)
function (X, FUN, ...)
?grepl
library(data.table)
install.packages("data.table")
install.packages("h20")
install.packages("h2o")
library(data.table)
library(h2o)
cat("reading the train and test data (with data.table) \n")
train <- fread("../train.csv",stringsAsFactors = T)
setwd("~/Documents/USCA/Rossmann/Kaggle")
train <- fread("../train.csv",stringsAsFactors = T)
train <- fread("./train.csv",stringsAsFactors = T)
setwd("~/Documents/USCA/Rossmann/Kaggle/Big Hand")
test  <- fread("../test.csv",stringsAsFactors = T)
train <- fread("../train.csv",stringsAsFactors = T)
store <- fread("../store.csv",stringsAsFactors = T)
train <- merge(train,store,by="Store")
test <- merge(test,store,by="Store")
cat("train data column names and details\n")
summary(train)
cat("test data column names and details\n")
summary(test)
## more care should be taken to ensure the dates of test can be projected from train
## decision trees do not project well, so you will want to have some strategy here, if using the dates
train[,Date:=as.Date(Date)]
test[,Date:=as.Date(Date)]
train[,month:=as.integer(format(Date, "%m"))]
train[,year:=as.integer(format(Date, "%y"))]
train[,Store:=as.factor(as.numeric(Store))]
test[,month:=as.integer(format(Date, "%m"))]
test[,year:=as.integer(format(Date, "%y"))]
test[,Store:=as.factor(as.numeric(Store))]
train[,logSales:=log1p(Sales)]
View(train)
h2o.init(nthreads=-1,max_mem_size='6G')
trainHex<-as.h2o(train)
features<-colnames(train)[!(colnames(train) %in% c("Id","Date","Sales","logSales","Customers"))]
rfHex <- h2o.randomForest(x=features,
y="logSales",
ntrees = 100,
max_depth = 30,
nbins_cats = 1115, ## allow it to fit store ID
training_frame=trainHex)
h2o.init(nthreads=-1,max_mem_size='6G')
trainHex<-as.h2o(train)
## Set up variable to use all features other than those specified here
features<-colnames(train)[!(colnames(train) %in% c("Id","Date","Sales","logSales","Customers"))]
## Train a random forest using all default parameters
rfHex <- h2o.randomForest(x=features,
y="logSales",
ntrees = 100,
nbins_cats = 1115, ## allow it to fit store ID
max_depth = 30,
training_frame=trainHex)
summary(rfHex)
testHex<-as.h2o(test)
predictions<-as.data.frame(h2o.predict(rfHex,testHex))
pred <- expm1(predictions[,1])
summary(pred)
submission <- data.frame(Id=test$Id, Sales=pred)
cat("saving the submission file\n")
write.csv(submission, "h2o_rf.csv",row.names=F)
View(test)
View(train[sample(train,nrow(train),100)])
View(train[sample(train,nrow(train),100)],)
View(train[sample(train,nrow(train),100)],)
View(train[sample(nrow(train),100)])
View(test)
View(test[which(train$Store==1),])
?h2o
??h20
?h2o
?h2ots190
ts190
?ts
?ts
?ts
no.of.trading.days <- length(unique(store190$DayOfWeek[store190$Open == 1]))
store190 <- store190[1:(nrow(store190) - nrow(store190) %% no.of.trading.days),][store190$Sales != 0,]
View(store190)
AirPassengers
str(AirPassengers)
str(AirPassengers)
?arima
fit(arima(ts190))
os <- read.delim("opensignals_file_2015-10-09_13-03-34.txt")
setwd("~/Documents/MindLab")
os <- read.delim("opensignals_file_2015-10-09_13-03-34.txt")
os <- fread("opensignals_file_2015-10-09_13-03-34.txt")
?fre
?read.
os <- read.csv("opensignals_file_2015-10-09_13-03-34.txt")
?read.csv
os <- read.table("opensignals_file_2015-10-09_13-03-34.txt".header=FALSE,skip=3)
os <- read.table("opensignals_file_2015-10-09_13-03-34.txt",header=FALSE,skip=3)
View(os)
colnames(os)
colnames(os) <- c("nSeq", "I1", "I2", "I3", "I4", "A1", "A2")
View(os)
summary(os)
View(os[which(os$I2==0),])
View(os[which(os$I2==1),])
View(os[which(os$I2==0),])
library(ggplot2)
ggplot(os,aes(y=I2))+geom_line()
qplot(os$I2)
plot(os$I2)
ggplot(os,aes(y=I2))+geom_point()
ggplot(os)+geom_point()
store190 <- store190[1:(nrow(store190) - nrow(store190) %% no.of.trading.days),][store190$Sales != 0,]
plot(decompose(ts190))
plot(decompose(ts190)$x - decompose(ts190)$random)
plot(decompose(ts190))
ggplot(cbind(store190, pred190)) + geom_line(aes(x = Date, y = Sales), col = 'dodgerblue3') + geom_line(aes(x = Date, y = pred190), col = 'tomato3')
rf190 <- randomForest(data = store190, Sales ~ DayOfWeek + Customers + Open + Promo + StateHoliday + SchoolHoliday + PromoMonth)
library(randomForest)
install.packages('randomForest')
ggplot(train.ss[train.ss$Store == 190,])+ geom_line(aes(x = Date, y = Sales))
ggplot(os)+geom_point()
View(os)
View(os)
View(os)
View(os)
ggplot(os)+geom_point(aes(x=nSeq,y=I2))
View(os)
ggplot(os)+geom_point(aes(x=row.names(os),y=I2))
plot(os$I2)
setwd("~/Documents/MindLab/Data/EyeDataTest")
pupil <- read.csv("eyedata.csv")
pupil <- read.csv("eyedata.csv",delim=';')
pupil <- read.csv("eyedata.csv",sep=';')
View(pupil)
View(pupil)
pp <- read.csv("eyedata.csv",sep=';')
row.names(pp)
col.names(pp)
colnames(pp)
plot(pp$PupilLeft)
plot(os$I2,type='l')
os <- read.table("opensignals_file_2015-10-09_13-03-34.txt",header=FALSE,skip=3)
colnames(os) <- c("nSeq", "I1", "I2", "I3", "I4", "A1", "A2")
setwd("~/Documents/MindLab/Data/Test_20151009")
os <- read.table("opensignals_file_2015-10-09_13-03-34.txt",header=FALSE,skip=3)
plot(os$I2,type='l')
plot(os$I2)
os <- read.table("opensignals_file_2015-10-09_13-03-34.txt",header=FALSE,skip=3)
colnames(os) <- c("nSeq", "I1", "I2", "I3", "I4", "A1", "A2")
plot(os$I2)
plot(os$I2)
